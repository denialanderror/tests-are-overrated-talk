import React from "react";
import {
  FlexBox,
  Heading,
  UnorderedList,
  ListItem,
  FullScreen,
  AnimatedProgress,
  Appear,
  Slide,
  Deck,
  Text,
  Box,
  Notes,
  Link,
  Image,
  Grid,
} from "spectacle";
import { OversizedQuote, QuoteAndImage } from "./quotes";
import github from "./images/GitHub-Mark.png";
import meetup from "./images/meetup.png";
import dilbert1 from "./images/dilbert1.png";
import dilbert2 from "./images/dilbert2.png";
import dilbert3 from "./images/dilbert3.png";
import dilbert4 from "./images/dilbert4.png";
import manga from "./images/manga.png";
import superhero from "./images/superhero.png";
import kingDino from "./images/king-dino.png";

const theme = {
  fonts: {
    header: '"Open Sans Condensed", Helvetica, Arial, sans-serif',
    text: '"Open Sans Condensed", Helvetica, Arial, sans-serif',
  },
};

const template = () => (
  <FlexBox
    justifyContent="space-between"
    position="absolute"
    bottom={0}
    width={1}
  >
    <Box padding="0 1em">
      <FullScreen />
    </Box>
    <Box padding="1em">
      <AnimatedProgress />
    </Box>
  </FlexBox>
);

const TitlePage = () => (
  <Slide justifyContent="center">
    <Heading>Testing is Overrated</Heading>
    <Image src={meetup} width={"100%"} height={"60%"} overflow={"hidden"} style={{ objectFit: "cover" }} />
    <FlexBox justifyContent={"flex-end"} >
      <Text fontSize={38}>Sam Joseph, Senior Developer @ Ministry of Justice</Text>
    </FlexBox>
    <Notes>
      <p>
        This talk was going to be on Rust and WebAssembly but how the hell am I meant to explain all of that in five minutes? So instead, I thought I'd bring up something possibly a bit controversial: I think testing is overrated.
      </p>
      <p>
        Oh, and before I start, I got accepted onto the beta of DALL-E today, so all the images in this presentation are generated by an AI. This one is titled "me speaking at a javascript meetup in front of an audience".
      </p>
    </Notes>
  </Slide>
);

const TestAnnoyances = () => (
  <>
    <Slide>
      <Heading>Why do you hate tests so much?</Heading>
      <Notes>
        <p>
          So what's my problem with tests? I write them, I practice TDD when I can, I rely on them every day to provide the confidence to release changes to production. But I that doesn't mean I have to like them, and I'd guess that most of you have felt this way before also! Be honest with me, how many of these quotes ring true for you?
        </p>
        <p>
          By the way, the following pictures were generated with the prompt "software developer angry at their build pipeline, in the style of Dilbert"
        </p>
      </Notes>
    </Slide>
    <Slide>
      <QuoteAndImage
        quote="I spent an hour making this feature work and a whole day fixing the tests"
        image={dilbert1}
      />
    </Slide>
    <Slide>
      <QuoteAndImage
        quote="It's taken three attempts to get this through CI because of someone else's flakey tests"
        image={dilbert2}
      />
    </Slide>
    <Slide>
      <QuoteAndImage
        quote="I can't help right now, I have to write a load of unit tests to reach the required code coverage"
        image={dilbert3}
      />
    </Slide>
    <Slide>
      <QuoteAndImage
        quote="It can't possibly be a bug, all our tests are passing!"
        image={dilbert4}
      />
    </Slide>
  </>
);

const TestsAreImportant = () => (
  <Slide>
    <Heading>Tests are important!</Heading>
    <Grid
      gridTemplateColumns="50% 50%"
      height="100%"
    >
      <FlexBox alignItems="center" justifyContent="center">
        <UnorderedList>
          <Appear>
            <ListItem>
              Continuous Delivery
            </ListItem>
          </Appear>
          <Appear>
            <ListItem>
              Test-Driven Development
            </ListItem>
          </Appear>
          <Appear>
            <ListItem>
              Refactoring
            </ListItem>
          </Appear>
          <Appear>
            <ListItem>
              Documentation
            </ListItem>
          </Appear>
        </UnorderedList>
      </FlexBox>
      <FlexBox alignItems="center" justifyContent="center">
        <Image src={manga} width="80%" style={{ objectFit: "cover" }} />
      </FlexBox>
    </Grid>
    <Notes>
      <p>
        But tests _are_ vitally important in modern, Agile
        software development!
      </p>
      <p>
        Without tests to catch regressions, Continuous
        Delivery would not be possible, and having worked on a team that over the past
        year has moved from fortnightly releases to double figure releases
        daily, CD has been a huge improvement for the product, the users, and
        the developer experience.
      </p>
      <p>
        Without tests, Test-Driven Development would not be possible,
        and TDD produces objectively higher-quality code.
      </p>
      <p>
        Without tests to give us the confidence to make changes, it is often too risky to refactor code. As the great Michael C. Feathers said in Working Effectively with Legacy Code, "legacy code is simply code without tests"
      </p>
      <p>
        Lastly, tests often provide useful documentation and starting by reading the tests is often a good approach to becoming getting to grips with unfamiliar codebases.
      </p>
      <p>
        This image by the way is titled "The most important test in the world, manga style"
      </p>
    </Notes>
  </Slide>
);

const HowToThink = () => (
  <>
    <Slide>
      <Heading>So what's the problem?</Heading>
      <Grid
        gridTemplateColumns="50% 50%"
        height="100%"
      >
        <FlexBox alignItems="center" justifyContent="center">
          <UnorderedList>
            <Appear>
              <Appear>
                <ListItem>
                  Flakey tests → <br /> loss of confidence
                </ListItem>
              </Appear>
              <ListItem>
                Tests taking too long → <br /> cutting corners
              </ListItem>
            </Appear>
            <Appear>
              <ListItem>
                Overzealous coverage requirements → <br /> poor quality filler
              </ListItem>
            </Appear>
            <Appear>
              <ListItem>
                Badly named tests → <br /> confusion
              </ListItem>
            </Appear>
          </UnorderedList>
        </FlexBox>
        <FlexBox alignItems="center" justifyContent="center">
          <Image src={superhero} width="80%" style={{ objectFit: "cover" }} />
        </FlexBox>
      </Grid>
      <Notes>
        <p>
          As "Superhero whose special power is confidence" demonstrates, tests are meant to give you confidence,  but those frustrations earlier show something is eroding that confidence.
        </p>
        <p><b>EXAMPLES</b></p>
        <p>
          So what can we do to improve confidence in our applications and improve the developer experience?
        </p>
      </Notes>
    </Slide>
    <Slide>
      <Grid
        gridTemplateColumns="50% 50%"
        gridTemplateRows="50% 50%"
        height="100%"
      >
        <FlexBox alignItems="center" justifyContent="center">
          <Appear>
            <Heading>Most testing can be automated, but often isn't</Heading>
          </Appear>
        </FlexBox>
        <FlexBox alignItems="center" justifyContent="center">
          <Appear>
            <Heading color="white">Tests should be useful, and most are not</Heading>
          </Appear>
        </FlexBox>
        <FlexBox alignItems="center" justifyContent="center">
          <Appear>
            <Heading color="white">Test behaviour, not implementation</Heading>
          </Appear>
        </FlexBox>
        <FlexBox alignItems="center" justifyContent="center">
          <Appear>
            <Heading>Observability is more important than coverage</Heading>
          </Appear>
        </FlexBox>
      </Grid>
      <Notes>
        So what are the problems, and how can we overcome them? 
        <h3>Most testing can be automated, but often isn't</h3>
        <p>
          A lazy developer is a good developer, so don't write tests when you don't need to, and by that, I mean use the tools at your disposal to test for you. If you are a JavaScript developer and haven't moved to TypeScript, you are giving yourself extra work to do. In JavaScript, the onus is on you as the developer to ensure the validity of what is being passed to a function, whereas TypeScript passes that responsibility onto the transpiler.
        </p>
        <p>If you look at languages with very strict compilers, such as Haskell or Rust, they come with a near guarantee that
          if the code compiles, it is going to work, due to a combination of rich type systems, and immutability by default. While we can't get to Haskell's confidence levels in JS land, we can do our bit to avoid writing tests, by using libraries such as immutable.js.
        </p>
        <h3>Tests should be useful, and most are not</h3>
        <p>
          TDD and unit tests are a fantastic way to write and develop code, but if your unit test mocks out all external dependencies (as unit tests tend to), they are not useful once your feature is complete. If the
          interface of your unit changes, all of your unit tests need changing also, and if the mocked services change, you might end up with a test suite that doesn't reflect reality. We have a mindset drilled into us as software developers
          that deleting tests is a "bad thing" but I'd argue that a significant
          portion of product's CI pipeline is effectively dead code. Back to Michael C Feathers, who says "Code is inventory. It is stuff lying around and it has substantial cost of ownership.". Tests in your suite need maintaining just as much as the code does, and the less information to maintain, the better.
        </p>
        <h3>Test behaviour, not implementation</h3>
        <p>
          Similarly, it is easy to fall into a trap with unit tests especially of
          writing your tests to only validate your code you are writing in the moment. However, it is easy to forget that the "refactor" step of "Red-Green-Refactor" in TDD also applies to the tests. The tests that form our pipeline, provide confidence, and promote maintainability are the ones that test the _behaviour_ of our application, not how the code is implemented. For those already using Kent Dodds' React Testing Library, I am preaching to the choir, and if you haven't started using it yet (there's also versions for inferior frameworks like Angular), it is a great example of a framework geared towards testing behaviour.
        </p>
        <h3>Observability is more important than coverage</h3>
        <p>
          A test suite can only tell us what we already know to look for and it doesn't matter how great your code coverage is if you have no way of identifying a bug that slips through the gap. Who here has some test coverage monitor blocks
          PRs, but at the same time has little insight into the actual functioning of their application in production,
          save for a few Cloudwatch alerts in AWS? What's more important to your users - that you stop regressions or that you can identify and triage when something has gone wrong?
        </p>
      </Notes>
    </Slide>
  </>
);

const Conclusion = () => (
  <Slide>
    <Text>My top tips to improve confidence in your application (while doing less work):</Text>
    <UnorderedList animateListItems>
      <ListItem>Be lazy!</ListItem>
      <ListItem>Don't be afraid to delete tests</ListItem>
      <ListItem>Test behaviour, not implementation</ListItem>
      <ListItem>Observability over code coverage</ListItem>
    </UnorderedList>
    <Notes>
      <p>
        So, absolutely keep practicing TDD! Keep building test pipelines that allow for Continuous Integration and Delivery. But avoid the trap of thinking the more tests, the better, and above all, be as lazy as possible!
      </p>
    </Notes>
  </Slide>
);

const Thanks = () => (
  <Slide>
    <Heading>Thanks for listening!</Heading>
    <Text>Inspiration and further reading:</Text>
    <UnorderedList>
      <ListItem>
        <Link href="https://kentcdodds.com/blog/write-tests">
          Kent C. Dodds - Write tests. Not too many. Mostly integration
        </Link>
      </ListItem>
      <ListItem>
        <Link href="https://youtu.be/-UKEPd2ipEk">
          Chad Fowler - Kill "Microservices" before its too late
        </Link>
      </ListItem>
      <ListItem>
        <Link href="https://michaelfeathers.typepad.com/michael_feathers_blog/2011/05/the-carrying-cost-of-code-taking-lean-seriously.html">
          Michael Feathers - The Carrying-Cost of Code
        </Link>
      </ListItem>
      <ListItem>
        <Link href="https://www.goodreads.com/en/book/show/44919.Working_Effectively_with_Legacy_Code">
          Michael Feathers - Working Effectively with Legacy Code
        </Link>
      </ListItem>
    </UnorderedList>
    <Text>
      You can find these slides on my Github:{" "}
      <img src={github} alt="github" style={{ paddingRight: "5px" }} />
      denialanderror
    </Text>
    <Notes>
      Thanks for listening! This slide deck is pinned to my Github so feel free
      to take a look. I don't do Twitter, so if you have any comments - positive
      or negative - we can discuss them over a pint in the pub after.
    </Notes>
  </Slide>
);

const Bonus = () => (
  <Slide>
    <FlexBox alignItems="center" justifyContent="center" maxHeight="90%">
          <Image src={kingDino} height="100%" style={{ objectFit: "contain" }} />
        </FlexBox>
        <Notes>
          And I'll leave you with my favourite thing a computer has done for me today - a picture titled "a stegasaurus on a throne wearing a mink robe posing for a 16th century portrait"
        </Notes>
  </Slide>
)

const Presentation = () => (
  <Deck theme={theme} template={template}>
    <TitlePage />
    <TestAnnoyances />
    <TestsAreImportant />
    <HowToThink />
    <Conclusion />
    <Thanks />
    <Bonus />
  </Deck>
);

export { Presentation };
